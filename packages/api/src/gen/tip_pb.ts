// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file tip.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.TipIntent
 */
export class TipIntent extends Message<TipIntent> {
  /**
   * @generated from field: string intent_id = 1;
   */
  intentId = "";

  /**
   * @generated from field: string item_id = 2;
   */
  itemId = "";

  /**
   * @generated from field: string destination = 4;
   */
  destination = "";

  /**
   * @generated from field: string amount = 5;
   */
  amount = "";

  /**
   * @generated from field: string currency = 6;
   */
  currency = "";

  constructor(data?: PartialMessage<TipIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.TipIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TipIntent {
    return new TipIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TipIntent {
    return new TipIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TipIntent {
    return new TipIntent().fromJsonString(jsonString, options);
  }

  static equals(a: TipIntent | PlainMessage<TipIntent> | undefined, b: TipIntent | PlainMessage<TipIntent> | undefined): boolean {
    return proto3.util.equals(TipIntent, a, b);
  }
}

/**
 * @generated from message api.TipIntentCreateRequest
 */
export class TipIntentCreateRequest extends Message<TipIntentCreateRequest> {
  /**
   * @generated from field: string item_id = 1;
   */
  itemId = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<TipIntentCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.TipIntentCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TipIntentCreateRequest {
    return new TipIntentCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TipIntentCreateRequest {
    return new TipIntentCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TipIntentCreateRequest {
    return new TipIntentCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TipIntentCreateRequest | PlainMessage<TipIntentCreateRequest> | undefined, b: TipIntentCreateRequest | PlainMessage<TipIntentCreateRequest> | undefined): boolean {
    return proto3.util.equals(TipIntentCreateRequest, a, b);
  }
}

/**
 * @generated from message api.TipIntentCreateResponse
 */
export class TipIntentCreateResponse extends Message<TipIntentCreateResponse> {
  /**
   * @generated from field: api.TipIntentCreateResponse.Result result = 1;
   */
  result = TipIntentCreateResponse_Result.OK;

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret = "";

  constructor(data?: PartialMessage<TipIntentCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.TipIntentCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(TipIntentCreateResponse_Result) },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TipIntentCreateResponse {
    return new TipIntentCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TipIntentCreateResponse {
    return new TipIntentCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TipIntentCreateResponse {
    return new TipIntentCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TipIntentCreateResponse | PlainMessage<TipIntentCreateResponse> | undefined, b: TipIntentCreateResponse | PlainMessage<TipIntentCreateResponse> | undefined): boolean {
    return proto3.util.equals(TipIntentCreateResponse, a, b);
  }
}

/**
 * @generated from enum api.TipIntentCreateResponse.Result
 */
export enum TipIntentCreateResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: ALREADY_EXISTS = 3;
   */
  ALREADY_EXISTS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(TipIntentCreateResponse_Result)
proto3.util.setEnumType(TipIntentCreateResponse_Result, "api.TipIntentCreateResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "ALREADY_EXISTS" },
]);

