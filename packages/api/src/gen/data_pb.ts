// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file data.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string owner_id = 3;
   */
  ownerId = "";

  /**
   * @generated from field: string key = 4;
   */
  key = "";

  /**
   * @generated from field: bytes value = 5;
   */
  value = new Uint8Array(0);

  /**
   * @generated from field: string hash = 6;
   */
  hash = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message api.DataFile
 */
export class DataFile extends Message<DataFile> {
  /**
   * @generated from field: string mime_type = 1;
   */
  mimeType = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<DataFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataFile {
    return new DataFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataFile {
    return new DataFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataFile {
    return new DataFile().fromJsonString(jsonString, options);
  }

  static equals(a: DataFile | PlainMessage<DataFile> | undefined, b: DataFile | PlainMessage<DataFile> | undefined): boolean {
    return proto3.util.equals(DataFile, a, b);
  }
}

/**
 * @generated from message api.DataUploadRequest
 */
export class DataUploadRequest extends Message<DataUploadRequest> {
  /**
   * @generated from field: api.DataFile file = 1;
   */
  file?: DataFile;

  constructor(data?: PartialMessage<DataUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: DataFile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataUploadRequest {
    return new DataUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataUploadRequest {
    return new DataUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataUploadRequest {
    return new DataUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DataUploadRequest | PlainMessage<DataUploadRequest> | undefined, b: DataUploadRequest | PlainMessage<DataUploadRequest> | undefined): boolean {
    return proto3.util.equals(DataUploadRequest, a, b);
  }
}

/**
 * @generated from message api.DataUploadResponse
 */
export class DataUploadResponse extends Message<DataUploadResponse> {
  /**
   * @generated from field: api.DataUploadResponse.Result result = 1;
   */
  result = DataUploadResponse_Result.OK;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DataUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(DataUploadResponse_Result) },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataUploadResponse {
    return new DataUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataUploadResponse {
    return new DataUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataUploadResponse {
    return new DataUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DataUploadResponse | PlainMessage<DataUploadResponse> | undefined, b: DataUploadResponse | PlainMessage<DataUploadResponse> | undefined): boolean {
    return proto3.util.equals(DataUploadResponse, a, b);
  }
}

/**
 * @generated from enum api.DataUploadResponse.Result
 */
export enum DataUploadResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DataUploadResponse_Result)
proto3.util.setEnumType(DataUploadResponse_Result, "api.DataUploadResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
]);

/**
 * @generated from message api.DataGetPreviewRequest
 */
export class DataGetPreviewRequest extends Message<DataGetPreviewRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  constructor(data?: PartialMessage<DataGetPreviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetPreviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetPreviewRequest {
    return new DataGetPreviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetPreviewRequest {
    return new DataGetPreviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetPreviewRequest {
    return new DataGetPreviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetPreviewRequest | PlainMessage<DataGetPreviewRequest> | undefined, b: DataGetPreviewRequest | PlainMessage<DataGetPreviewRequest> | undefined): boolean {
    return proto3.util.equals(DataGetPreviewRequest, a, b);
  }
}

/**
 * @generated from message api.DataGetPreviewResponse
 */
export class DataGetPreviewResponse extends Message<DataGetPreviewResponse> {
  /**
   * @generated from field: api.DataGetPreviewResponse.Result result = 1;
   */
  result = DataGetPreviewResponse_Result.OK;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<DataGetPreviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetPreviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(DataGetPreviewResponse_Result) },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetPreviewResponse {
    return new DataGetPreviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetPreviewResponse {
    return new DataGetPreviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetPreviewResponse {
    return new DataGetPreviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetPreviewResponse | PlainMessage<DataGetPreviewResponse> | undefined, b: DataGetPreviewResponse | PlainMessage<DataGetPreviewResponse> | undefined): boolean {
    return proto3.util.equals(DataGetPreviewResponse, a, b);
  }
}

/**
 * @generated from enum api.DataGetPreviewResponse.Result
 */
export enum DataGetPreviewResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DataGetPreviewResponse_Result)
proto3.util.setEnumType(DataGetPreviewResponse_Result, "api.DataGetPreviewResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
]);

/**
 * @generated from message api.DataGetFullRequest
 */
export class DataGetFullRequest extends Message<DataGetFullRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  constructor(data?: PartialMessage<DataGetFullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetFullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetFullRequest {
    return new DataGetFullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetFullRequest {
    return new DataGetFullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetFullRequest {
    return new DataGetFullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetFullRequest | PlainMessage<DataGetFullRequest> | undefined, b: DataGetFullRequest | PlainMessage<DataGetFullRequest> | undefined): boolean {
    return proto3.util.equals(DataGetFullRequest, a, b);
  }
}

/**
 * @generated from message api.DataGetFullResponse
 */
export class DataGetFullResponse extends Message<DataGetFullResponse> {
  /**
   * @generated from field: api.DataGetFullResponse.Result result = 1;
   */
  result = DataGetFullResponse_Result.OK;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<DataGetFullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetFullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(DataGetFullResponse_Result) },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetFullResponse {
    return new DataGetFullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetFullResponse {
    return new DataGetFullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetFullResponse {
    return new DataGetFullResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetFullResponse | PlainMessage<DataGetFullResponse> | undefined, b: DataGetFullResponse | PlainMessage<DataGetFullResponse> | undefined): boolean {
    return proto3.util.equals(DataGetFullResponse, a, b);
  }
}

/**
 * @generated from enum api.DataGetFullResponse.Result
 */
export enum DataGetFullResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_PURCHASED = 3;
   */
  NOT_PURCHASED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DataGetFullResponse_Result)
proto3.util.setEnumType(DataGetFullResponse_Result, "api.DataGetFullResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_PURCHASED" },
]);

/**
 * Blog post data objects
 *
 * @generated from message api.DataPost
 */
export class DataPost extends Message<DataPost> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string content_preview = 4;
   */
  contentPreview = "";

  /**
   * @generated from field: string author_id = 5;
   */
  authorId = "";

  /**
   * @generated from field: string created_at = 6;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 7;
   */
  updatedAt = "";

  /**
   * @generated from field: string tags = 8;
   */
  tags = "";

  constructor(data?: PartialMessage<DataPost>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataPost";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content_preview", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "author_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPost {
    return new DataPost().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPost {
    return new DataPost().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPost {
    return new DataPost().fromJsonString(jsonString, options);
  }

  static equals(a: DataPost | PlainMessage<DataPost> | undefined, b: DataPost | PlainMessage<DataPost> | undefined): boolean {
    return proto3.util.equals(DataPost, a, b);
  }
}

/**
 * @generated from message api.DataGetAllPostsRequest
 */
export class DataGetAllPostsRequest extends Message<DataGetAllPostsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string tag = 3;
   */
  tag = "";

  /**
   * @generated from field: string author_id = 4;
   */
  authorId = "";

  /**
   * @generated from field: string sort_by = 5;
   */
  sortBy = "";

  /**
   * @generated from field: bool ascending = 6;
   */
  ascending = false;

  constructor(data?: PartialMessage<DataGetAllPostsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetAllPostsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "author_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sort_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetAllPostsRequest {
    return new DataGetAllPostsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetAllPostsRequest {
    return new DataGetAllPostsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetAllPostsRequest {
    return new DataGetAllPostsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetAllPostsRequest | PlainMessage<DataGetAllPostsRequest> | undefined, b: DataGetAllPostsRequest | PlainMessage<DataGetAllPostsRequest> | undefined): boolean {
    return proto3.util.equals(DataGetAllPostsRequest, a, b);
  }
}

/**
 * @generated from message api.DataGetAllPostsResponse
 */
export class DataGetAllPostsResponse extends Message<DataGetAllPostsResponse> {
  /**
   * @generated from field: api.DataGetAllPostsResponse.Result result = 1;
   */
  result = DataGetAllPostsResponse_Result.OK;

  /**
   * @generated from field: repeated api.DataPost posts = 2;
   */
  posts: DataPost[] = [];

  constructor(data?: PartialMessage<DataGetAllPostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.DataGetAllPostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(DataGetAllPostsResponse_Result) },
    { no: 2, name: "posts", kind: "message", T: DataPost, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGetAllPostsResponse {
    return new DataGetAllPostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGetAllPostsResponse {
    return new DataGetAllPostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGetAllPostsResponse {
    return new DataGetAllPostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DataGetAllPostsResponse | PlainMessage<DataGetAllPostsResponse> | undefined, b: DataGetAllPostsResponse | PlainMessage<DataGetAllPostsResponse> | undefined): boolean {
    return proto3.util.equals(DataGetAllPostsResponse, a, b);
  }
}

/**
 * @generated from enum api.DataGetAllPostsResponse.Result
 */
export enum DataGetAllPostsResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DataGetAllPostsResponse_Result)
proto3.util.setEnumType(DataGetAllPostsResponse_Result, "api.DataGetAllPostsResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
]);

