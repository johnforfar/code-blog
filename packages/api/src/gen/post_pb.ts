// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file post.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.Post
 */
export class Post extends Message<Post> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string short = 3;
   */
  short = "";

  /**
   * @generated from field: string slug = 4;
   */
  slug = "";

  /**
   * @generated from field: string price = 5;
   */
  price = "";

  /**
   * @generated from field: string payment_address = 6;
   */
  paymentAddress = "";

  /**
   * @generated from field: bool has_paywall = 7;
   */
  hasPaywall = false;

  /**
   * @generated from field: string owner_id = 8;
   */
  ownerId = "";

  /**
   * @generated from field: string content_id = 9;
   */
  contentId = "";

  /**
   * @generated from field: string image_id = 10;
   */
  imageId = "";

  /**
   * @generated from field: string created_at = 11;
   */
  createdAt = "";

  constructor(data?: PartialMessage<Post>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.Post";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "short", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "payment_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "has_paywall", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "content_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "image_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Post {
    return new Post().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJsonString(jsonString, options);
  }

  static equals(a: Post | PlainMessage<Post> | undefined, b: Post | PlainMessage<Post> | undefined): boolean {
    return proto3.util.equals(Post, a, b);
  }
}

/**
 * @generated from message api.PostCreateRequest
 */
export class PostCreateRequest extends Message<PostCreateRequest> {
  /**
   * @generated from field: api.Post post = 1;
   */
  post?: Post;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<PostCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post", kind: "message", T: Post },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCreateRequest {
    return new PostCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCreateRequest {
    return new PostCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCreateRequest {
    return new PostCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCreateRequest | PlainMessage<PostCreateRequest> | undefined, b: PostCreateRequest | PlainMessage<PostCreateRequest> | undefined): boolean {
    return proto3.util.equals(PostCreateRequest, a, b);
  }
}

/**
 * @generated from message api.PostCreateResponse
 */
export class PostCreateResponse extends Message<PostCreateResponse> {
  /**
   * @generated from field: api.PostCreateResponse.Result result = 1;
   */
  result = PostCreateResponse_Result.OK;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  constructor(data?: PartialMessage<PostCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(PostCreateResponse_Result) },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCreateResponse {
    return new PostCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCreateResponse {
    return new PostCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCreateResponse {
    return new PostCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostCreateResponse | PlainMessage<PostCreateResponse> | undefined, b: PostCreateResponse | PlainMessage<PostCreateResponse> | undefined): boolean {
    return proto3.util.equals(PostCreateResponse, a, b);
  }
}

/**
 * @generated from enum api.PostCreateResponse.Result
 */
export enum PostCreateResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: ALREADY_EXISTS = 3;
   */
  ALREADY_EXISTS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PostCreateResponse_Result)
proto3.util.setEnumType(PostCreateResponse_Result, "api.PostCreateResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "ALREADY_EXISTS" },
]);

/**
 * @generated from message api.PostGetRequest
 */
export class PostGetRequest extends Message<PostGetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  constructor(data?: PartialMessage<PostGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostGetRequest {
    return new PostGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostGetRequest {
    return new PostGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostGetRequest {
    return new PostGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostGetRequest | PlainMessage<PostGetRequest> | undefined, b: PostGetRequest | PlainMessage<PostGetRequest> | undefined): boolean {
    return proto3.util.equals(PostGetRequest, a, b);
  }
}

/**
 * @generated from message api.PostGetResponse
 */
export class PostGetResponse extends Message<PostGetResponse> {
  /**
   * @generated from field: api.PostGetResponse.Result result = 1;
   */
  result = PostGetResponse_Result.OK;

  /**
   * @generated from field: api.Post post = 2;
   */
  post?: Post;

  constructor(data?: PartialMessage<PostGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(PostGetResponse_Result) },
    { no: 2, name: "post", kind: "message", T: Post },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostGetResponse {
    return new PostGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostGetResponse {
    return new PostGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostGetResponse {
    return new PostGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostGetResponse | PlainMessage<PostGetResponse> | undefined, b: PostGetResponse | PlainMessage<PostGetResponse> | undefined): boolean {
    return proto3.util.equals(PostGetResponse, a, b);
  }
}

/**
 * @generated from enum api.PostGetResponse.Result
 */
export enum PostGetResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,

  /**
   * @generated from enum value: NOT_FOUND = 3;
   */
  NOT_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PostGetResponse_Result)
proto3.util.setEnumType(PostGetResponse_Result, "api.PostGetResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
  { no: 3, name: "NOT_FOUND" },
]);

/**
 * @generated from message api.PostGetPaginatedRequest
 */
export class PostGetPaginatedRequest extends Message<PostGetPaginatedRequest> {
  /**
   * @generated from field: string owner_id = 1;
   */
  ownerId = "";

  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<PostGetPaginatedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostGetPaginatedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostGetPaginatedRequest {
    return new PostGetPaginatedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostGetPaginatedRequest {
    return new PostGetPaginatedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostGetPaginatedRequest {
    return new PostGetPaginatedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostGetPaginatedRequest | PlainMessage<PostGetPaginatedRequest> | undefined, b: PostGetPaginatedRequest | PlainMessage<PostGetPaginatedRequest> | undefined): boolean {
    return proto3.util.equals(PostGetPaginatedRequest, a, b);
  }
}

/**
 * @generated from message api.PostGetPaginatedResponse
 */
export class PostGetPaginatedResponse extends Message<PostGetPaginatedResponse> {
  /**
   * @generated from field: api.PostGetPaginatedResponse.Result result = 1;
   */
  result = PostGetPaginatedResponse_Result.OK;

  /**
   * @generated from field: repeated api.Post posts = 2;
   */
  posts: Post[] = [];

  constructor(data?: PartialMessage<PostGetPaginatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.PostGetPaginatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(PostGetPaginatedResponse_Result) },
    { no: 2, name: "posts", kind: "message", T: Post, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostGetPaginatedResponse {
    return new PostGetPaginatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostGetPaginatedResponse {
    return new PostGetPaginatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostGetPaginatedResponse {
    return new PostGetPaginatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostGetPaginatedResponse | PlainMessage<PostGetPaginatedResponse> | undefined, b: PostGetPaginatedResponse | PlainMessage<PostGetPaginatedResponse> | undefined): boolean {
    return proto3.util.equals(PostGetPaginatedResponse, a, b);
  }
}

/**
 * @generated from enum api.PostGetPaginatedResponse.Result
 */
export enum PostGetPaginatedResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_REQUEST = 1;
   */
  INVALID_REQUEST = 1,

  /**
   * @generated from enum value: UNKNOWN_ERROR = 2;
   */
  UNKNOWN_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PostGetPaginatedResponse_Result)
proto3.util.setEnumType(PostGetPaginatedResponse_Result, "api.PostGetPaginatedResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_REQUEST" },
  { no: 2, name: "UNKNOWN_ERROR" },
]);

